package com.permutation;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

public class Soultion_perm {
	/*
	 * Input: s1 = "ab", s2 = "eidbaooo"
		Output: true
		Explanation: s2 contains one permutation of s1 ("ba")
		[e][i][d][b][a][o][o][o]
		
		get permutations of string 1
		check if second string contains permutations
		
		
	 */
	static void incValue(HashMap<Character, Integer> cMap, Character key) {
		Integer cnt = cMap.get(key);
		if(cnt == null) {cMap.put(key, 1);} else {cMap.put(key, cnt + 1);} // increment count or add new
	}
	
	static void decValue(HashMap<Character, Integer> cMap, Character key) {
		Integer cnt = cMap.get(key);
		if(cnt == null) {cMap.put(key, 1);} else {cMap.put(key, cnt - 1);} // increment count or add new
	}
	
	static int matches(HashMap<Character, Integer> map1, HashMap<Character, Integer> map2) {
		int matches = 0;
		for (Map.Entry<Character,Integer> mapElement : map1.entrySet()) {
            Character key = mapElement.getKey();
            if(map1.get(key) == map2.get(key)) matches++;
		}
		return matches;
	}
	
	
	static public boolean checkInclusion(String s1, String s2) {
	  
	  if(s1.length() > s2.length()) return false;
	  
	  HashMap<Character, Integer> s1Map = new HashMap<>();
	  HashMap<Character, Integer> s2Map = new HashMap<>(); 
	  
	  String alphabet = "abcdefghijklmnopqrstuvwxyz";
	  for(int i = 0; i < 26; i++) {
		  s1Map.put(alphabet.charAt(i), 0);
		  s2Map.put(alphabet.charAt(i), 0);
	  }
	  
	  for(int i=0; i < s1.length(); i++) {
		  incValue(s1Map, s1.charAt(i));
		  incValue(s2Map, s2.charAt(i));
	  }
	  	  
	  int left = 0;
	  for(int i = s1.length(); i < s2.length(); i++) {
		if(matches(s1Map,s2Map) == 26) return true;
		
		char key = 	s2.charAt(i);
		incValue(s2Map, key);

		key = s2.charAt(left);
		decValue(s2Map, key);
				
		left++;
	  }
	  
	  return matches(s1Map,s2Map) == 26;
	}

	public static void main(String[] args) {
		
		File file = new File("input.txt");

		// try with resources, Java 1.7+, handles resource handling, eg: closing them
		try (FileReader fileReader = new FileReader(file);
			 BufferedReader bufferReader = new BufferedReader(fileReader);) {
			
			String line;
			String[] lines = new String[2];
			int i = 0;
			while((line = bufferReader.readLine()) != null) {
				lines[i] = line;
				i++;
			}
			
		} catch (IOException e) {
			System.out.println("Error: " + e.getMessage());
		} 
		
		long startTime = System.currentTimeMillis();
		System.out.println(checkInclusion("a", "ab"));
		System.out.println(checkInclusion("prosperity", "properties"));
		System.out.println(checkInclusion("ab", "eidbaooo"));
		System.out.println(checkInclusion("ab", "eidboaoo"));
		long endTime = System.currentTimeMillis();
		
		System.out.println("Timer " + (endTime - startTime) + " milliseconds");
		
	}

}

//static void getPermutations(String str, String ans, Set<String> perms)
//{
//
//    if (str.length() == 0) {
//    	perms.add(ans);
//    	ans = "";
//        return;
//    }
//
//    for (int i = 0; i < str.length(); i++) {
//
//        char ch = str.charAt(i);
//
//        String ros = str.substring(0, i) +
//                    str.substring(i + 1);
//
//        getPermutations(ros, ans + ch, perms);
//    }
//}
//
//public static Set<String> permutationFinder(String str) {
//    Set<String> perm = new HashSet<String>();
//    //Handling error scenarios
//    if (str == null) {
//        return null;
//    } else if (str.length() == 0) {
//        perm.add("");
//        return perm;
//    }
//    char initial = str.charAt(0); // first character
//    String rem = str.substring(1); // Full string without first character
//    Set<String> words = permutationFinder(rem);
//    for (String strNew : words) {
//        for (int i = 0;i<=strNew.length();i++){
//            perm.add(charInsert(strNew, initial, i));
//        }
//    }
//    return perm;
//}
//
//public static String charInsert(String str, char c, int j) {
//    String begin = str.substring(0, j);
//    String end = str.substring(j);
//    return begin + c + end;
//}
//


