package com.leetcode.inverttree;

public class Solution {
	
    public static TreeNode insertInverted(TreeNode root, int val) {
    	
    	if(root == null) {
    		return new TreeNode(val);
    	}
    	
    	if(val > root.val) {
    		root.left = insertInverted(root.left, val);
       	}else {
    		root.right = insertInverted(root.right, val);
    	}
    	
    	return root;
    	
    }
    
    public static TreeNode traverseInorder(TreeNode root, TreeNode newTree)
    {
        if (root == null) {
            return newTree;
        }
         
        traverseInorder(root.left, newTree);
        insertInverted(newTree, root.val);
        traverseInorder(root.right, newTree);
        
        return newTree;
        
    }

    static public TreeNode invertTree(TreeNode root) {
        if(root == null) return null;
        
    	return traverseInorder(root, null);
    }
    
	public static void main(String[] args) {
		TreeNode root = new TreeNode(4);
		root = TreeNode.constructBST(root, new int[] {2,7,1,3,6,9});
		
		TreeNode.printLevelOrder(root);
		
			
		root = new TreeNode(2);
		root = TreeNode.constructBST(root, new int[] {1,3});
		
		TreeNode.printLevelOrder(root);
		
		root = invertTree(root);
		
		TreeNode.printLevelOrder(root);
		
	}

}
