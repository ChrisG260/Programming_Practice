package com.leetcode.inverttree;

// Definition for a binary tree node.
public class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;
    TreeNode() {}
    TreeNode(int val) { this.val = val; }
    TreeNode(int val, TreeNode left, TreeNode right) {
        this.val = val;
        this.left = left;
        this.right = right;
    }
    
    public static TreeNode insert(TreeNode root, int val) {
    	
    	if(root == null) {
    		return new TreeNode(val);
    	}
    	
    	if(val < root.val) {
    		root.left = insert(root.left, val);
       	}else {
    		root.right = insert(root.right, val);
    	}
    	
    	return root;
    	
    }
    
    // Function to construct a BST from given keys
    public static TreeNode constructBST(TreeNode root, int[] keys)
    {
        for (int key: keys) {
            root = insert(root, key);
        }
        return root;
    }
    
    // Function to perform inorder traversal on the tree
    public static void inorder(TreeNode root)
    {
        if (root == null) {
            return;
        }
 
        inorder(root.left);
        System.out.print(root.val + " ");
        inorder(root.right);
    }
    
    public static void printFromRootLeft(TreeNode root)
    {
        if (root == null) {
            return;
        }

        System.out.print(root.val + " ");
        inorder(root.left);
        inorder(root.right);
    }
    
}
