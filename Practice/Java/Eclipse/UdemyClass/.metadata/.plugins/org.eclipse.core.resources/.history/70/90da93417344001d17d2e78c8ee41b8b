package com.chris.slidingWindowMax;

import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Deque;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;

public class SlidingWindowMax {
	
	static public int[] maxSlidingWindow(int[] nums, int k) {
        if(k == 1) return nums;
        
        List<Integer> result = new ArrayList<>();
        Deque<Integer> dq = new ArrayDeque<>();
        int left =0, right = 0;
        
        while(right < nums.length) {
        	while(!dq.isEmpty() && nums[dq.getFirst()] < nums[right]) dq.pop();               	
        	dq.addLast(right);
        	
        	// remove left val
        	if(left > dq.getFirst()) dq.removeFirst();
        	


        	//check if still in bounds
        	if(right + 1 >= k) {
        		result.add(nums[dq.getFirst()]);
        		left++;
        	}
        	right++;
        }
        	
		return result.stream()
                .mapToInt(Integer::intValue)
                .toArray();
    }

	public static void main(String[] args) {

		long startTime = System.currentTimeMillis();
		System.out.println(Arrays.toString(maxSlidingWindow(new int[] {-6,-10,-7,-1,-9,9,-8,-4,10,-5,2,9,0,-7,7,4,-2,-10,8,7}, 7)));
		System.out.println(Arrays.toString(maxSlidingWindow(new int[] {9,10,9,-7,-4,-8,2,-6}, 5)));
		System.out.println(Arrays.toString(maxSlidingWindow(new int[] {1,3,1,2,0,5}, 3)));
		System.out.println(Arrays.toString(maxSlidingWindow(new int[] {7,2,4}, 2)));
		System.out.println(Arrays.toString(maxSlidingWindow(new int[] {1,3,-1,-3,5,3,6,7}, 3)));
		System.out.println(Arrays.toString(maxSlidingWindow(new int[] {1}, 1)));
		long endTime = System.currentTimeMillis();
		
		System.out.println("Timer " + (endTime - startTime) + " milliseconds");

	}

}
