package com.chris.slidingWindowMax;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;

public class SlidingWindowMax {
	
	static public int[] maxSlidingWindow(int[] nums, int k) {
        if(k == 1) return nums;
        
        List<Integer> result = new ArrayList<>();
        
       // TreeSet<Integer> window = new TreeSet<>();
        
        //Arrays.sort(nums);
        
        for(int left = 0; left <= nums.length - k; left++) {
        	int right = left + k;
        	int[] window = Arrays.copyOfRange(nums, left, right);
        	Arrays.sort(window);
        	result.add(window[k - 1]);
        	//for(int i = left ; i <= right; i++) window.add(nums[i]);
        	//result.add(window.last()); 
        	//window.clear();
        }

		return result.stream()
                .mapToInt(Integer::intValue)
                .toArray();
    }

	public static void main(String[] args) {
		
		long startTime = System.currentTimeMillis();
		System.out.println(Arrays.toString(maxSlidingWindow(new int[] {1,3,-1,-3,5,3,6,7}, 3)));
		System.out.println(Arrays.toString(maxSlidingWindow(new int[] {1}, 1)));
		long endTime = System.currentTimeMillis();
		
		System.out.println("Timer " + (endTime - startTime) + " milliseconds");

	}

}
