package com.leetcode.binarystmaxdepth;

import com.leetcode.inverttree.TreeNode;

public class Solution {
	
    static public int maxDepth(TreeNode root) {
        
    	if (root == null)
            return 0;
        else {
            /* compute height of each subtree */
            int lheight = maxDepth(root.left);
            int rheight = maxDepth(root.right);
 
            /* use the larger one */
            if (lheight > rheight)
                return (lheight + 1);
            else
                return (rheight + 1);
        }
    }
    
    static public int diameterOfBinaryTree(TreeNode root) {
        int cnt = 0;
        
        cnt = maxDepth(root.left);
        cnt += maxDepth(root.right);
        
        return cnt;
    }

	public static void main(String[] args) {
		TreeNode root = new TreeNode(1);
		root.left = new TreeNode(2);
		root.right = new TreeNode(3);
		root.left.left = new TreeNode(4);
		root.left.right = new TreeNode(5);
		
		//root = TreeNode.constructBST(root, new Integer[] {9,20,null,null,15,7});
		
		TreeNode.printLevelOrder(root);
		
		System.out.println(diameterOfBinaryTree(root));
			
//		root = new TreeNode(2);
//		root = TreeNode.constructBST(root, new Integer[] {1,null,2});
//		
//		TreeNode.printLevelOrder(root);
//		
//		System.out.println(maxDepth(root));
		
	}

}
